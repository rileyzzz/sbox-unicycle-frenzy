
@BaseClass = BaseProperties_rileyzzz_unicycle_frenzy_nn
[
	parentname(target_destination) [ group="Hierarchy" ] : "Parent" : : "The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."
	parentAttachmentName(parentAttachment) [ group="Hierarchy" ] : "Parent Model Bone/Attachment Name" : : "The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment."

	useLocalOffset(boolean) [ group="Hierarchy" ] : "Use Model Attachment offsets" : 0 : "Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."
	local.origin(vector) [ group="Hierarchy" ] : "Model Attachment position offset" : : "Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.angles(angle) [ group="Hierarchy" ] : "Model Attachment angular offset" : : "Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."
	local.scales(vector) [ group="Hierarchy" ] : "Model Attachment scale" : : "Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."

	targetname(target_source) : "Name" : : "The name that other entities refer to this entity by."
	tags(tags) : "Tags" : "" : "A list of general purpose tags for this entity, for interactions with other entities such as triggers."
]

//
// AchievementMedals
//
@PointClass base(BaseProperties_rileyzzz_unicycle_frenzy_nn) iconsprite( "materials/editor/achievement_medals.vmat" ) 
metadata
{
	entity_tool_name = "Unicycle Frenzy Medals"
	entity_tool_group = "Unicycle Frenzy"
	entity_tool_tip = "Set the time for achievement medals."
}
= uf_achievement_medals : ""
[
	gold_threshold(float) : "Gold" : 0 : "Time (in seconds) to achieve the gold medal for this map"
	silver_threshold(float) : "Silver" : 0 : "Time (in seconds) to achieve the silver medal for this map"
	bronze_threshold(float) : "Bronze" : 0 : "Time (in seconds) to achieve the bronze medal for this map"
]

//
// Checkpoint
//
@PointClass base(BaseProperties_rileyzzz_unicycle_frenzy_nn) editormodel( "models/checkpoint_platform_hammer.vmdl", fixedbounds ) 
metadata
{
	entity_tool_name = "Player Checkpoint"
	entity_tool_group = "Unicycle Frenzy"
	entity_tool_tip = "Defines a checkpoint where the player will respawn after falling."
}
= uf_checkpoint : "Defines a checkpoint where the player will respawn after falling"
[
	isstart(boolean) : "Is Start" : 0 : ""
	isend(boolean) : "Is End" : 0 : ""
	number(integer) : "Number" : 0 : ""
	model_type(choices) : "Model Type" : 0 : "Movement type of the door." =
	[
		0 : "Dev"
		1 : "Metal"
		2 : "Stone"
		3 : "Wood"
	]
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// Collectible
//
@PointClass base(BaseProperties_rileyzzz_unicycle_frenzy_nn) tags( SupportsSolids ) model() 
metadata
{
	entity_tool_name = "Unicycle Frenzy Collectible"
	entity_tool_group = "Unicycle Frenzy"
	entity_tool_tip = "A prop that can be collected."
}
= uf_collectible : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	collection(string) : "Collection" :  : "Discretionary name of the collection group this collectible belongs to."
	no_camera_collide(boolean) : "No Camera Collide" : 0 : "The Unicycle camera will maintain its position when touching this prop"
	camera_fade(boolean) : "Camera Fade" : 0 : "This prop will fade out when it's between the player and the camera"
	solid(boolean) : "Solid" : 1 : ""
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// FallTrigger
//
@SolidClass base(BaseProperties_rileyzzz_unicycle_frenzy_nn) tags( Trigger ) 
metadata
{
	auto_apply_material = "materials/editor/uf_trigger_fall.vmat"
	entity_tool_name = "Trigger Fall"
	entity_tool_group = "Unicycle Frenzy"
	entity_tool_tip = "Makes the player fall."
}
= uf_trigger_fall : "Makes the player fall"
[
	startdisabled(boolean) : "Start Disabled" : 0 : "Should this entity start disabled?"
	actvationtags(tags) : "Actvation Tags" :  : "Entities with these tags can activate this trigger."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
	spawnflags(flags) = [
		1 : "Clients" : 1
		2 : "Npcs" : 0
		4 : "Pushables" : 0
		8 : "Physics Objects" : 0
		16 : "Allied Npcs" : 0
		32 : "Client In Vehicle" : 0
		64 : "Everything" : 0
		512 : "Client Not In Vehicle" : 0
		1024 : "Physics Debris" : 0
	]

	input Enable(void) : "Enables this trigger"
	input Disable(void) : "Disables this trigger"
	input Toggle(void) : "Toggles this trigger between enabled and disabled states"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger while no other passing entities are touching it."
	output OnEndTouchAll(void) : "Fired when all entities touching this trigger have stopped touching it."
]

//
// FitnessNode
//
@PathNodeClass = path_uf_fitness_node : ""
[
]

//
// FitnessPath
//
@PathClass base(BaseProperties_rileyzzz_unicycle_frenzy_nn) 
metadata
{
	node_entity_class = "path_uf_fitness_node"
}
= path_uf_fitness : ""
[
]

//
// LeaderboardPost
//
@PointClass base(BaseProperties_rileyzzz_unicycle_frenzy_nn) editormodel( "models/leaderboard_post.vmdl" ) 
metadata
{
	entity_tool_name = "Leaderboard Post"
	entity_tool_group = "Unicycle Frenzy"
	entity_tool_tip = "Shows a leaderboard in-game"
}
= uf_leaderboard : "Shows a leaderboard in-game"
[
	model_type(choices) : "Model Type" : 0 : "Movement type of the door." =
	[
		0 : "Metal"
		1 : "Stone"
		2 : "Wood"
	]
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

//
// ResetProgressTrigger
//
@SolidClass base(BaseProperties_rileyzzz_unicycle_frenzy_nn) tags( Trigger ) 
metadata
{
	auto_apply_material = "materials/editor/uf_trigger_reset_progress.vmat"
	entity_tool_name = "Reset Progress"
	entity_tool_group = "Unicycle Frenzy"
	entity_tool_tip = ""
}
= uf_trigger_reset_progress : "Resets the player's progress by clearing checkpoints"
[
	startdisabled(boolean) : "Start Disabled" : 0 : "Should this entity start disabled?"
	actvationtags(tags) : "Actvation Tags" :  : "Entities with these tags can activate this trigger."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
	spawnflags(flags) = [
		1 : "Clients" : 1
		2 : "Npcs" : 0
		4 : "Pushables" : 0
		8 : "Physics Objects" : 0
		16 : "Allied Npcs" : 0
		32 : "Client In Vehicle" : 0
		64 : "Everything" : 0
		512 : "Client Not In Vehicle" : 0
		1024 : "Physics Debris" : 0
	]

	input Enable(void) : "Enables this trigger"
	input Disable(void) : "Disables this trigger"
	input Toggle(void) : "Toggles this trigger between enabled and disabled states"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger while no other passing entities are touching it."
	output OnEndTouchAll(void) : "Fired when all entities touching this trigger have stopped touching it."
]

//
// SurfaceTrigger
//
@SolidClass base(BaseProperties_rileyzzz_unicycle_frenzy_nn) tags( Trigger ) 
metadata
{
	entity_tool_name = "Trigger Surface"
	entity_tool_group = "Unicycle Frenzy"
	entity_tool_tip = "Overrides surface friction in an area."
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= uf_trigger_surface : "Overrides surface friction in an area"
[
	surfacetype(choices) : "Surface Type" : 0 : "" =
	[
		0 : "Default"
		1 : "Pavement"
		2 : "Mud"
		3 : "Snow"
		4 : "Ice"
		5 : "Grass"
		6 : "Dirt"
		7 : "Sand"
		8 : "Metal"
		9 : "Glass"
		10 : "Plastic"
	]
	overridedefaultfriction(boolean) : "Override Default Friction" : 0 : ""
	frictionoverride(float) : "Friction Override" : "1" : ""
	startdisabled(boolean) : "Start Disabled" : 0 : "Should this entity start disabled?"
	actvationtags(tags) : "Actvation Tags" :  : "Entities with these tags can activate this trigger."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
	spawnflags(flags) = [
		1 : "Clients" : 1
		2 : "Npcs" : 0
		4 : "Pushables" : 0
		8 : "Physics Objects" : 0
		16 : "Allied Npcs" : 0
		32 : "Client In Vehicle" : 0
		64 : "Everything" : 0
		512 : "Client Not In Vehicle" : 0
		1024 : "Physics Debris" : 0
	]

	input Enable(void) : "Enables this trigger"
	input Disable(void) : "Disables this trigger"
	input Toggle(void) : "Toggles this trigger between enabled and disabled states"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger while no other passing entities are touching it."
	output OnEndTouchAll(void) : "Fired when all entities touching this trigger have stopped touching it."
]

//
// TutorialTrigger
//
@SolidClass base(BaseProperties_rileyzzz_unicycle_frenzy_nn) tags( Trigger ) 
metadata
{
	entity_tool_name = "Trigger Tutorial"
	entity_tool_group = "Unicycle Frenzy"
	entity_tool_tip = "Enable tutorial features in this trigger."
	auto_apply_material = "materials/tools/toolstrigger.vmat"
}
= uf_trigger_tutorial : "Enable tutorial features in this trigger"
[
	displaybind(choices) : "Display Bind" : 0 : "" =
	[
		0 : "None"
		1 : "Pedal"
		2 : "Lean"
		3 : "Brake"
		4 : "Jump"
		5 : "Look"
		6 : "Brake And Lean"
		7 : "Jump Higher"
		8 : "Restart At Checkpoint"
		9 : "Restart Course"
		10 : "Left Pedal"
		11 : "Right Pedal"
		12 : "Spray"
		13 : "Menu"
	]
	perfectpedalglow(boolean) : "Perfect Pedal Glow" : 0 : ""
	startdisabled(boolean) : "Start Disabled" : 0 : "Should this entity start disabled?"
	actvationtags(tags) : "Actvation Tags" :  : "Entities with these tags can activate this trigger."
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"
	spawnflags(flags) = [
		1 : "Clients" : 1
		2 : "Npcs" : 0
		4 : "Pushables" : 0
		8 : "Physics Objects" : 0
		16 : "Allied Npcs" : 0
		32 : "Client In Vehicle" : 0
		64 : "Everything" : 0
		512 : "Client Not In Vehicle" : 0
		1024 : "Physics Debris" : 0
	]

	input Enable(void) : "Enables this trigger"
	input Disable(void) : "Disables this trigger"
	input Toggle(void) : "Toggles this trigger between enabled and disabled states"
	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."

	output OnStartTouch(void) : "Fired when an entity starts touching this trigger. The touching entity must pass this trigger's filters to cause this output to fire."
	output OnEndTouch(void) : "Fired when an entity stops touching this trigger. Only entities that passed this trigger's filters will cause this output to fire."
	output OnStartTouchAll(void) : "Fired when an entity starts touching this trigger while no other passing entities are touching it."
	output OnEndTouchAll(void) : "Fired when all entities touching this trigger have stopped touching it."
]

//
// UfProp
//
@PointClass base(BaseProperties_rileyzzz_unicycle_frenzy_nn) tags( SupportsSolids ) model() 
metadata
{
	entity_tool_name = "Unicycle Frenzy Prop"
	entity_tool_group = "Unicycle Frenzy"
	entity_tool_tip = "A model or Mesh that can be set to pass the camera through it."
}
= uf_prop : ""
[
	model(resource:vmdl) { report = true hide_when_solid = true }: "World Model" : "" : "The model this entity should use."
	skin(materialgroup) { group = "Rendering" hide_when_solid = true } : "Skin" : "default" : "Some models have multiple versions of their textures, called skins." 
	bodygroups(bodygroupchoices) { group = "Rendering" hide_when_solid = true } : "Body Groups" : "" : "Some models have multiple variations of certain items, such as characters having different hair styles, etc."
	no_camera_collide(boolean) : "No Camera Collide" : 0 : "The Unicycle camera will maintain its position when touching this prop"
	camera_fade(boolean) : "Camera Fade" : 0 : "This prop will fade out when it's between the player and the camera"
	solid(boolean) : "Solid" : 1 : ""
	enable_shadows(boolean) { group = "Rendering" } : "Shadow Casting" : 1 : "Whether this entity should cast shadows or not"

	input SetColor(string) : "Sets the color of this entity. Format is '255 255 255 255'."
]

